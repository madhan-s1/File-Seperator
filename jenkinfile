pipeline {
    agent {
        label 'DSTRLAAE9201'
    }
    options {
        disableConcurrentBuilds()
    }
    parameters { 
        string(name: 'userid', description: 'Type your user userid', defaultValue: '')
        string(name: 'password', description: 'Type your user password', defaultValue: '')
        choice(name: 'cluster',choices: ['accp-1','accp-2'], description: 'What Cluster to get Deployments?')
        string(name: 'scaled',description: 'Type to scale up|down1|down0', defaultValue: '')
        choice(name: 'cluster1',choices: ['accp-1','accp-2'], description: 'What Cluster to Scale Deployment?')
        choice(name: 'action',choices: ['deploymentlist'], description: 'What Operation to perform?')
    }
    
     environment {
        MYUID = "${params.userid}"
        PASSW = "${params.password}"
        CLUSTERNAME = "${params.cluster}"
        CLUSTERNAMEONE = "${params.cluster1}"
        SCALED = "${params.scaled}"
        EMAIL_FROM = 'ShaikSadiq.Basha@voya.com'
        EMAIL_TO = 'sagar.reddy@voya.com'
    }   
    
    stages {
//         stage('Approval') {
//             when {
//                 expression { params.action == 'deploymentlist' }
//             }
//             steps {
//                 script {
//                     mail from: "${EMAIL_FROM}", to: "${EMAIL_TO}", subject: "APPROVAL REQUIRED FOR $JOB_NAME" , body: """Openshift ${CLUSTERNAME} cluster pod restart. Please go to $BUILD_URL for more info."""
//                     def deploymentDelay = input id: 'Deploy', message: "Deploy to Openshift ${CLUSTERNAME} cluster?", parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
//                     sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
//                 }
//             }
//         }        
        stage ("Get_occluster_Deployment") {
            when {
                expression { params.action == 'deploymentlist' }
            }  
            steps {
                sh '''
                   chmod 777 apply_deployment_resultsets.sh get_deployment_resultsets.sh
                   ./get_deployment_resultsets.sh ${CLUSTERNAME} ${MYUID}
                   ./apply_deployment_resultsets.sh ${SCALED} ${CLUSTERNAMEONE}
                '''
            }
        }
    }
    post {
        always {
            //sh 'printenv'
            deleteDir()
        }
    }    
}
